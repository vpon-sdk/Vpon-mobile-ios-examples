// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VpadnSDKAdKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreLocation
import CoreServices
import CoreTelephony
import EventKit
import Foundation
import MessageUI
import OSLog
import Photos
import StoreKit
import Swift
import SystemConfiguration
import UIKit
@_exported import VpadnSDKAdKit
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @objcMembers public class VpadnAdObstruction : ObjectiveC.NSObject {
  @objc weak public var view: UIKit.UIView?
  @objc public var purpose: VpadnSDKAdKit.VpadnFriendlyObstructionType
  @objc public var desc: Swift.String
  @objc public class func getVpadnPurpose(_ int: Swift.Int) -> VpadnSDKAdKit.VpadnFriendlyObstructionType
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VpadnInterstitialDelegate {
  @objc optional func onVpadnInterstitialLoaded(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitial(_ interstitial: VpadnSDKAdKit.VpadnInterstitial, failedToLoad error: any Swift.Error)
  @objc optional func onVpadnInterstitialWillLeaveApplication(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitialWillOpen(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitialClosed(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitialClicked(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
}
@objc @objcMembers public class VpadnInterstitial : ObjectiveC.NSObject {
  @objc weak public var delegate: (any VpadnSDKAdKit.VpadnInterstitialDelegate)?
  @objc public var strBannerId: Swift.String?
  @objc public var platform: Swift.String?
  @objc public var testIdentifiers: [Swift.String]
  @objc public var hasBeenUsed: Swift.Bool
  @objc public init(licenseKey: Swift.String)
  @objc public func loadRequest(_ request: VpadnSDKAdKit.VpadnAdRequest)
  @objc public func showFromRootViewController(_ rootViewCtrl: UIKit.UIViewController)
  @objc public func isReady() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class VpadnVideoAdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  #warning("Not being called")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  #warning("Not being called")
  @objc deinit
}
@objc public enum VpadnLogLevel : Swift.Int {
  case debug = 0
  case defaultLevel = 1
  case dontShow = 99
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VpadnFriendlyObstructionType : Swift.Int {
  case mediaControls = 0
  case closeAd
  case notVisible
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VpadnUserGender : Swift.Int {
  case unspecified = -1
  case male
  case female
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VpadnMaxAdContentRating : Swift.Int {
  case unspecified = -1
  case general
  case parentalGuidance
  case teen
  case matureAudience
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VpadnTagForChildDirectedTreatment : Swift.Int {
  case unspecified = -1
  case notForChildDirectedTreatment
  case forChildDirectedTreatment
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VpadnTagForUnderAgeOfConsent : Swift.Int {
  case unspecified = -1
  case notForUnderAgeOfConsent
  case forUnderAgeOfConsent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class VpadnAdRequest : ObjectiveC.NSObject {
  @objc public var autoRefresh: Swift.Bool
  @objc override dynamic public init()
  @objc public class func sdkVersion() -> Swift.String
  @objc public func setUserInfoLocation(_ location: CoreLocation.CLLocation)
  @objc public func setUserInfoAge(_ age: Swift.Int)
  #warning("Unused method")
  @objc public func setUserInfoBirthday(year: Swift.Int, month: Swift.Int, day: Swift.Int)
  @objc public func setUserInfoGender(_ gender: VpadnSDKAdKit.VpadnUserGender)
  @objc public func setTestDevices(_ testDevices: [Swift.String])
  @objc public func setTagFor(maxAdContentRating: VpadnSDKAdKit.VpadnMaxAdContentRating)
  @objc public func setTagFor(underAgeOfConsent: VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent)
  @objc public func setTagFor(childDirectedTreatment: VpadnSDKAdKit.VpadnTagForChildDirectedTreatment)
  @objc public func setContentUrl(_ contentURL: Swift.String)
  @objc public func setContentData(_ contentData: [Swift.String : Any])
  @objc public func addContentData(key: Swift.String, value: Swift.String)
  @objc public func addFriendlyObstruction(_ obstructView: UIKit.UIView, purpose: VpadnSDKAdKit.VpadnFriendlyObstructionType, description: Swift.String)
  @objc public func addKeyword(_ keyword: Swift.String)
  @objc deinit
}
@objc public enum VponConsentStatus : Swift.Int {
  case unknown = -1
  case nonPersonalized = 0
  case personalized = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class VponUCB : ObjectiveC.NSObject {
  @objc public static let shared: VpadnSDKAdKit.VponUCB
  @objc public func setConsentStatus(_ status: VpadnSDKAdKit.VponConsentStatus)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class VpadnAdAudioManager : ObjectiveC.NSObject {
  @objc public var isAudioApplicationManaged: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static let shared: VpadnSDKAdKit.VpadnAdAudioManager
  @objc public func noticeApplicationAudioWillStart()
  @objc public func noticeApplicationAudioDidEnded()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class VpadnAdConfiguration : ObjectiveC.NSObject {
  @objc public var logLevel: VpadnSDKAdKit.VpadnLogLevel {
    @objc get
    @objc set
  }
  @objc public var audioManager: VpadnSDKAdKit.VpadnAdAudioManager
  @objc public var locationManager: VpadnSDKAdKit.VpadnAdLocationManager
  @objc public static let shared: VpadnSDKAdKit.VpadnAdConfiguration
  @objc public func initializeSdk()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class VPNativeGestureRecognizer : UIKit.UITapGestureRecognizer {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
@objc public protocol VpadnBannerDelegate {
  @objc optional func onVpadnAdLoaded(_ banner: VpadnSDKAdKit.VpadnBanner)
  @objc optional func onVpadnAd(_ banner: VpadnSDKAdKit.VpadnBanner, failedToLoad error: any Swift.Error)
  @objc optional func onVpadnAdWillLeaveApplication(_ banner: VpadnSDKAdKit.VpadnBanner)
  @objc optional func onVpadnAdWillOpen(_ banner: VpadnSDKAdKit.VpadnBanner)
  @objc optional func onVpadnAdClosed(_ banner: VpadnSDKAdKit.VpadnBanner)
  @objc optional func onVpadnAdClicked(_ banner: VpadnSDKAdKit.VpadnBanner)
  @objc optional func onVpadnAdRefreshed(_ banner: VpadnSDKAdKit.VpadnBanner)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class VpadnAdSize : ObjectiveC.NSObject {
  @objc public init(CGSize size: CoreFoundation.CGSize)
  @objc public class func banner() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func largeBanner() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func largeRectangle() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func fullBanner() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func leaderBoard() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func mediumRectangle() -> VpadnSDKAdKit.VpadnAdSize
  @objc deinit
}
@objc @objcMembers public class VpadnBanner : ObjectiveC.NSObject {
  @objc public var strBannerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc weak public var rootViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc weak public var delegate: (any VpadnSDKAdKit.VpadnBannerDelegate)?
  @objc public var platform: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var testIdentifiers: [Swift.String]
  @objc public init(licenseKey: Swift.String, adSize: VpadnSDKAdKit.VpadnAdSize)
  @objc public func cgSize(from adSize: VpadnSDKAdKit.VpadnAdSize) -> CoreFoundation.CGSize
  @objc public func loadRequest(_ request: VpadnSDKAdKit.VpadnAdRequest)
  @objc public func getVpadnAdView() -> UIKit.UIView?
  @objc deinit
}
@objc public enum VpadnInReadAdType : Swift.Int {
  case customAd = 0
  case inScroll
  case inTable
  case inTableRepeat
  case inTableCustomAd
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol VpadnInReadAdDelegate {
  @objc optional func vpadnInReadAd(_ ad: VpadnSDKAdKit.VpadnInReadAd, didFailLoading error: any Swift.Error)
  @objc optional func vpadnInReadAdWillLoad(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidLoad(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillStart(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidStart(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillStop(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidStop(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidPause(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidResume(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidMute(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidUnmute(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdCanExpand(_ ad: VpadnSDKAdKit.VpadnInReadAd, withRatio ratio: CoreFoundation.CGFloat)
  @objc optional func vpadnInReadAdWillExpand(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidExpand(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdCanCollapse(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillCollapse(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidCollapse(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWasClicked(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidClickBrowserClose(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillTakeOverFullScreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidTakeOverFullScreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillDismissFullscreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidDismissFullscreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdSkipButtonTapped(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdSkipButtonDidShow(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidReset(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidClean(_ ad: VpadnSDKAdKit.VpadnInReadAd)
}
@objc @objcMembers public class VpadnInReadAd : ObjectiveC.NSObject {
  @objc public var vpadnInReadAdType: VpadnSDKAdKit.VpadnInReadAdType
  @objc public var isLoaded: Swift.Bool
  @objc public var indexPath: Foundation.IndexPath?
  @objc weak public var delegate: (any VpadnSDKAdKit.VpadnInReadAdDelegate)?
  @objc public var videoAdView: VpadnSDKAdKit.VpadnVideoAdView?
  @objc public init(placementId: Swift.String, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, scrollView: UIKit.UIScrollView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, placeholder: UIKit.UIView, heightConstraint constraint: UIKit.NSLayoutConstraint, scrollView: UIKit.UIScrollView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, insertionIndexPath indexPath: Foundation.IndexPath, tableView: UIKit.UITableView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, insertionIndexPath indexPath: Foundation.IndexPath, repeatMode: Swift.Bool, tableView: UIKit.UITableView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc public func loadAdWithTestIdentifiers(_ testIdentifiers: [Swift.String])
  @objc public func videoView() -> UIKit.UIView?
  @objc public func setContentUrl(_ contentURL: Swift.String)
  @objc public func setContentData(_ contentData: [Swift.String : Any])
  @objc public func addContentData(key: Swift.String, value: Swift.String)
  @objc public func addFriendlyObstruction(_ obstructView: UIKit.UIView, purpose: VpadnSDKAdKit.VpadnFriendlyObstructionType, description: Swift.String)
  @objc public func isVideoAd(_ indexPath: Foundation.IndexPath, stride: Swift.Int) -> Swift.Bool
  @objc deinit
}
extension VpadnSDKAdKit.VpadnInReadAd : Foundation.URLSessionDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
extension VpadnSDKAdKit.VpadnInReadAd : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
extension VpadnSDKAdKit.VpadnInReadAd : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
}
extension VpadnSDKAdKit.VpadnInReadAd : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, accessoryButtonTappedForRowWith indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldHighlightRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDeselectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: Foundation.IndexPath) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, targetIndexPathForMoveFromRowAt sourceIndexPath: Foundation.IndexPath, toProposedIndexPath proposedDestinationIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, indentationLevelForRowAt indexPath: Foundation.IndexPath) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldShowMenuForRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canPerformAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, performAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canFocusRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func indexPathForPreferredFocusedView(in tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldSpringLoadRowAt indexPath: Foundation.IndexPath, with context: any UIKit.UISpringLoadedInteractionContext) -> Swift.Bool
}
@objc public protocol VpadnMediaViewDelegate {
  @objc optional func mediaViewDidLoad(_ mediaView: VpadnSDKAdKit.VpadnMediaView)
  @objc optional func mediaViewDidFail(_ mediaView: VpadnSDKAdKit.VpadnMediaView, error: any Swift.Error)
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) public class VpadnMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any VpadnSDKAdKit.VpadnMediaViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) weak public var nativeAd: VpadnSDKAdKit.VpadnNativeAd? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var avoidPercentLessThan50: Swift.Bool
  #warning("onPause, onResume, onPlayStateChange are not used in current AD SDK version")
  @objc @_Concurrency.MainActor(unsafe) public init(withNativeAd nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  #warning("onPlayerStateChanged unused in current SDK version")
  @objc deinit
}
extension VpadnSDKAdKit.VpadnMediaView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension VpadnSDKAdKit.VpadnMediaView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension VpadnSDKAdKit.VpadnMediaView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class VpadnAdLocationManager : ObjectiveC.NSObject {
  @objc public static let shared: VpadnSDKAdKit.VpadnAdLocationManager
  @objc public var isEnable: Swift.Bool
  #warning("This method is not being used.")
  @objc deinit
}
extension VpadnSDKAdKit.VpadnAdLocationManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
}
@objc public protocol VpadnNativeAdDelegate {
  @objc optional func onVpadnNativeAdLoaded(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @objc optional func onVpadnNativeAd(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd, failedToLoad error: any Swift.Error)
  @objc optional func onVpadnNativeAdWillLeaveApplication(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @objc optional func onVpadnNativeAdDidImpression(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @objc optional func onVpadnNativeAdClicked(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
}
@objc @objcMembers public class VpadnNativeAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any VpadnSDKAdKit.VpadnNativeAdDelegate)?
  @objc public var strBannerId: Swift.String?
  @objc public var platform: Swift.String?
  @objc public var icon: VpadnSDKAdKit.VpadnAdImage?
  @objc public var coverImage: VpadnSDKAdKit.VpadnAdImage?
  @objc public var ratingValue: Swift.Double
  @objc public var ratingScale: Swift.Int
  @objc public var title: Swift.String?
  @objc public var body: Swift.String?
  @objc public var callToAction: Swift.String?
  @objc public var socialContext: Swift.String?
  @objc public init(licenseKey: Swift.String)
  @objc public func loadRequest(_ request: VpadnSDKAdKit.VpadnAdRequest)
  @objc public func clickHandler(_ sender: Any)
  @objc public func isReady() -> Swift.Bool
  @objc public func registerViewForInteraction(_ view: UIKit.UIView, withViewController viewController: UIKit.UIViewController)
  @objc public func unregisterView()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class VpadnAdImage : ObjectiveC.NSObject {
  @objc public var url: Foundation.URL
  @objc public func loadImageAsync(withBlock block: @escaping (UIKit.UIImage?) -> Swift.Void)
  #warning("Not being called")
  @objc deinit
}
extension VpadnSDKAdKit.VpadnLogLevel : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnLogLevel : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnLogLevel : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnFriendlyObstructionType : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnFriendlyObstructionType : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnFriendlyObstructionType : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnUserGender : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnUserGender : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnUserGender : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnMaxAdContentRating : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnMaxAdContentRating : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnMaxAdContentRating : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnTagForChildDirectedTreatment : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnTagForChildDirectedTreatment : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnTagForChildDirectedTreatment : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponConsentStatus : Swift.Equatable {}
extension VpadnSDKAdKit.VponConsentStatus : Swift.Hashable {}
extension VpadnSDKAdKit.VponConsentStatus : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnInReadAdType : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnInReadAdType : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnInReadAdType : Swift.RawRepresentable {}
