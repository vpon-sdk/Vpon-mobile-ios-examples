// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VpadnSDKAdKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreLocation
import CoreServices
import CoreTelephony
import EventKit
import Foundation
import MessageUI
import OSLog
import Photos
import StoreKit
import Swift
import SystemConfiguration
import UIKit
@_exported import VpadnSDKAdKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(*, deprecated, message: "Use VponFriendlyObstructionType instead.")
@objc public enum VpadnFriendlyObstructionType : Swift.Int {
  case mediaControls = 0
  case closeAd
  case notVisible
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Use VponUserGender instead.")
@objc public enum VpadnUserGender : Swift.Int {
  case unspecified = -1
  case male
  case female
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Use VponMaxAdContentRating instead.")
@objc public enum VpadnMaxAdContentRating : Swift.Int {
  case unspecified = -1
  case general
  case parentalGuidance
  case teen
  case matureAudience
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Use VponTagForChildDirectedTreatment instead.")
@objc public enum VpadnTagForChildDirectedTreatment : Swift.Int {
  case unspecified = -1
  case notForChildDirectedTreatment
  case forChildDirectedTreatment
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Use VponTagForUnderAgeOfConsent instead.")
@objc public enum VpadnTagForUnderAgeOfConsent : Swift.Int {
  case unspecified = -1
  case notForUnderAgeOfConsent
  case forUnderAgeOfConsent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use VponAdRequest instead.")
@objcMembers final public class VpadnAdRequest : ObjectiveC.NSObject {
  @objc final public var autoRefresh: Swift.Bool
  @objc final public class func sdkVersion() -> Swift.String
  @objc final public func setUserInfoLocation(_ location: CoreLocation.CLLocation)
  @objc final public func setUserInfoAge(_ age: Swift.Int)
  @objc final public func setUserInfoBirthday(year: Swift.Int, month: Swift.Int, day: Swift.Int)
  @objc final public func setUserInfoGender(_ gender: VpadnSDKAdKit.VpadnUserGender)
  @objc @available(*, deprecated, message: "Use VponAdRequestConfiguration.shared.testDeviceIdentifiers instead.")
  final public func setTestDevices(_ testDevices: [Swift.String])
  @objc final public func setTagFor(maxAdContentRating: VpadnSDKAdKit.VpadnMaxAdContentRating)
  @objc final public func setTagFor(underAgeOfConsent: VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent)
  @objc final public func setTagFor(childDirectedTreatment: VpadnSDKAdKit.VpadnTagForChildDirectedTreatment)
  @objc final public func setContentUrl(_ contentURL: Swift.String)
  @objc final public func setContentData(_ contentData: [Swift.String : Any])
  @objc final public func addContentData(key: Swift.String, value: Swift.String)
  @objc final public func addFriendlyObstruction(_ obstructView: UIKit.UIView, purpose: VpadnSDKAdKit.VpadnFriendlyObstructionType, description: Swift.String)
  @objc final public func addKeyword(_ keyword: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use VponAdLocationManager instead.")
@objcMembers final public class VpadnAdLocationManager : ObjectiveC.NSObject {
  @objc public static let shared: VpadnSDKAdKit.VpadnAdLocationManager
  @objc final public var isEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use VponAdAudioManager instead.")
@objcMembers final public class VpadnAdAudioManager : ObjectiveC.NSObject {
  @objc final public var isAudioApplicationManaged: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static let shared: VpadnSDKAdKit.VpadnAdAudioManager
  @objc final public func noticeApplicationAudioWillStart()
  @objc final public func noticeApplicationAudioDidEnded()
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VponFullScreenContentAd {
}
@objc public protocol VponFullScreenContentDelegate {
  @objc optional func adDidRecordImpression(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc optional func adDidRecordClick(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc optional func adWillPresentScreen(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc optional func adWillDismissScreen(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc optional func adDidDismissScreen(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc optional func ad(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponInterstitialAd : ObjectiveC.NSObject, VpadnSDKAdKit.VponFullScreenContentAd {
  @objc weak final public var delegate: (any VpadnSDKAdKit.VponFullScreenContentDelegate)?
  @objc public static func load(licenseKey: Swift.String, request: VpadnSDKAdKit.VponAdRequest, completion: @escaping (_ interstitial: VpadnSDKAdKit.VponInterstitialAd?, _ error: (any Swift.Error)?) -> Swift.Void)
  @objc final public func present(from rootViewController: UIKit.UIViewController)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponAdAudioManager : ObjectiveC.NSObject {
  @objc final public var isAudioApplicationManaged: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static let shared: VpadnSDKAdKit.VponAdAudioManager
  @objc final public func noticeApplicationAudioWillStart()
  @objc final public func noticeApplicationAudioDidEnded()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class VpadnVideoAdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class VponAdLocationManager : ObjectiveC.NSObject {
  @objc public static let shared: VpadnSDKAdKit.VponAdLocationManager
  @objc final public var isEnable: Swift.Bool
  @objc deinit
}
extension VpadnSDKAdKit.VponAdLocationManager : CoreLocation.CLLocationManagerDelegate {
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class VponMediaContent : ObjectiveC.NSObject {
  @objc final public var hasVideoContent: Swift.Bool
  @objc final public var videoController: VpadnSDKAdKit.VponVideoController?
  @objc final public var mainImage: UIKit.UIImage?
  @objc deinit
}
@objc public enum VponMaxAdContentRating : Swift.Int {
  case unspecified = -1
  case general
  case parentalGuidance
  case teen
  case matureAudience
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VponTagForChildDirectedTreatment : Swift.Int {
  case unspecified = -1
  case notForChildDirectedTreatment
  case forChildDirectedTreatment
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VponTagForUnderAgeOfConsent : Swift.Int {
  case unspecified = -1
  case notForUnderAgeOfConsent
  case forUnderAgeOfConsent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class VponAdRequestConfiguration : ObjectiveC.NSObject {
  @objc public static let shared: VpadnSDKAdKit.VponAdRequestConfiguration
  @objc final public var maxAdContentRating: VpadnSDKAdKit.VponMaxAdContentRating
  @objc final public var tagForUnderAgeOfConsent: VpadnSDKAdKit.VponTagForUnderAgeOfConsent
  @objc final public var tagForChildDirectedTreatment: VpadnSDKAdKit.VponTagForChildDirectedTreatment
  @objc final public var testDeviceIdentifiers: [Swift.String]?
  @objc deinit
}
@objc public protocol VponNativeAdDelegate {
  @objc optional func nativeAdDidRecordClick(_ nativeAd: VpadnSDKAdKit.VponNativeAd)
  @objc optional func nativeAdDidRecordImpression(_ nativeAd: VpadnSDKAdKit.VponNativeAd)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponNativeAd : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any VpadnSDKAdKit.VponNativeAdDelegate)?
  @objc final public var headline: Swift.String?
  @objc final public var callToAction: Swift.String?
  @objc final public var icon: VpadnSDKAdKit.VponNativeAdImage?
  @objc final public var body: Swift.String?
  @objc final public var coverImage: VpadnSDKAdKit.VponNativeAdImage?
  @objc final public var ratingValue: Swift.Double
  @objc final public var ratingScale: Swift.Int
  @objc final public var socialContext: Swift.String?
  @objc final public var mediaContent: VpadnSDKAdKit.VponMediaContent?
  @objc final public func loadMediaView(_ mediaView: VpadnSDKAdKit.VponMediaView?)
  @objc final public func registerAdView(_ view: UIKit.UIView)
  @objc final public func clickHandler(_ sender: Any)
  @objc final public func reportAdChoices()
  @objc deinit
  @objc override dynamic public init()
}
extension VpadnSDKAdKit.VponNativeAd : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use VponAdObstruction instead.")
@objcMembers final public class VpadnAdObstruction : ObjectiveC.NSObject {
  @objc weak final public var view: UIKit.UIView?
  @objc final public var purpose: VpadnSDKAdKit.VpadnFriendlyObstructionType
  @objc final public var desc: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VponBannerViewDelegate {
  @objc optional func bannerViewDidReceiveAd(_ bannerView: VpadnSDKAdKit.VponBannerView)
  @objc optional func bannerView(_ bannerView: VpadnSDKAdKit.VponBannerView, didFailToReceiveAdWithError error: any Swift.Error)
  @objc optional func bannerViewDidRecordImpression(_ bannerView: VpadnSDKAdKit.VponBannerView)
  @objc optional func bannerViewDidRecordClick(_ bannerView: VpadnSDKAdKit.VponBannerView)
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class VponAdSize : ObjectiveC.NSObject {
  @objc public init(size: CoreFoundation.CGSize)
  @objc final public class func banner() -> VpadnSDKAdKit.VponAdSize
  @objc final public class func largeBanner() -> VpadnSDKAdKit.VponAdSize
  @objc final public class func largeRectangle() -> VpadnSDKAdKit.VponAdSize
  @objc final public class func fullBanner() -> VpadnSDKAdKit.VponAdSize
  @objc final public class func leaderBoard() -> VpadnSDKAdKit.VponAdSize
  @objc final public class func mediumRectangle() -> VpadnSDKAdKit.VponAdSize
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class VponBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public var licenseKey: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) weak final public var rootViewController: UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: (any VpadnSDKAdKit.VponBannerViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public var autoRefresh: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public init(adSize: VpadnSDKAdKit.VponAdSize, origin: CoreFoundation.CGPoint)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(adSize: VpadnSDKAdKit.VponAdSize)
  @objc @_Concurrency.MainActor(unsafe) final public func load(_ request: VpadnSDKAdKit.VponAdRequest)
  @_Concurrency.MainActor(unsafe) @objc override final public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
@objc public enum VponUserGender : Swift.Int {
  case unspecified = -1
  case male
  case female
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponAdRequest : ObjectiveC.NSObject {
  @objc final public func setUserInfoAge(_ age: Swift.Int)
  @objc final public func setUserInfoBirthday(year: Swift.Int, month: Swift.Int, day: Swift.Int)
  @objc final public func setUserInfoGender(_ gender: VpadnSDKAdKit.VponUserGender)
  @objc final public func setContentUrl(_ contentURL: Swift.String)
  @objc final public func setContentData(_ contentData: [Swift.String : Any])
  @objc final public func addContentData(key: Swift.String, value: Swift.String)
  @objc final public func addFriendlyObstruction(_ obstructView: UIKit.UIView, purpose: VpadnSDKAdKit.VponFriendlyObstructionType, description: Swift.String)
  @objc final public func addKeyword(_ keyword: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@available(*, deprecated, message: "Use VponLogLevel instead.")
@objc public enum VpadnLogLevel : Swift.Int {
  case debug = 0
  case defaultLevel = 1
  case dontShow = 99
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use VponAdConfiguration instead.")
@objcMembers final public class VpadnAdConfiguration : ObjectiveC.NSObject {
  @objc final public var logLevel: VpadnSDKAdKit.VpadnLogLevel {
    @objc get
    @objc set
  }
  @objc final public var audioManager: VpadnSDKAdKit.VpadnAdAudioManager
  @objc final public var locationManager: VpadnSDKAdKit.VpadnAdLocationManager
  @objc public static let shared: VpadnSDKAdKit.VpadnAdConfiguration
  @objc final public func initializeSdk()
  @objc final public class func sdkVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum VponConsentStatus : Swift.Int {
  case unknown = -1
  case nonPersonalized = 0
  case personalized = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class VponUCB : ObjectiveC.NSObject {
  @objc public static let shared: VpadnSDKAdKit.VponUCB
  @objc final public func setConsentStatus(_ status: VpadnSDKAdKit.VponConsentStatus)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class VponMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public var mediaContent: VpadnSDKAdKit.VponMediaContent? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public func unregisterAllEvents()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@available(*, deprecated, message: "Use VponFullScreenContentDelegate instead.")
@objc public protocol VpadnInterstitialDelegate {
  @objc optional func onVpadnInterstitialLoaded(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitial(_ interstitial: VpadnSDKAdKit.VpadnInterstitial, failedToLoad error: any Swift.Error)
  @available(*, deprecated, message: "No replacement.")
  @objc optional func onVpadnInterstitialWillLeaveApplication(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitialWillOpen(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitialClosed(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
  @objc optional func onVpadnInterstitialClicked(_ interstitial: VpadnSDKAdKit.VpadnInterstitial)
}
@objc @available(*, deprecated, message: "Use VponInterstitialAd instead.")
@objcMembers final public class VpadnInterstitial : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any VpadnSDKAdKit.VpadnInterstitialDelegate)?
  @objc @available(*, deprecated, message: "No replacement.")
  final public var strBannerId: Swift.String?
  @objc @available(*, deprecated, message: "No replacement.")
  final public var platform: Swift.String?
  @objc @available(*, deprecated, message: "No replacement.")
  final public var hasBeenUsed: Swift.Bool
  @objc @available(*, deprecated, message: "Use VponAdRequestConfiguration.shared.testDeviceIdentifiers instead.")
  final public var testIdentifiers: [Swift.String]
  @objc public init(licenseKey: Swift.String)
  @objc final public func loadRequest(_ request: VpadnSDKAdKit.VpadnAdRequest)
  @objc final public func showFromRootViewController(_ rootViewCtrl: UIKit.UIViewController)
  @objc @available(*, deprecated, message: "No replacement.")
  final public func isReady() -> Swift.Bool
  @objc deinit
}
extension VpadnSDKAdKit.VpadnInterstitial : VpadnSDKAdKit.VponFullScreenContentDelegate {
  @objc final public func adWillPresentScreen(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc final public func adDidDismissScreen(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc final public func adDidRecordClick(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc final public func adWillDismissScreen(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
  @objc final public func ad(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidRecordImpression(_ ad: any VpadnSDKAdKit.VponFullScreenContentAd)
}
@available(*, deprecated, message: "Use VponBannerViewDelegate instead.")
@objc public protocol VpadnBannerDelegate {
  @objc optional func onVpadnAdLoaded(_ banner: VpadnSDKAdKit.VpadnBanner)
  @objc optional func onVpadnAd(_ banner: VpadnSDKAdKit.VpadnBanner, failedToLoad error: any Swift.Error)
  @objc optional func onVpadnAdClicked(_ banner: VpadnSDKAdKit.VpadnBanner)
  @available(*, deprecated, message: "No replacement.")
  @objc optional func onVpadnAdWillLeaveApplication(_ banner: VpadnSDKAdKit.VpadnBanner)
  @available(*, deprecated, message: "No replacement.")
  @objc optional func onVpadnAdWillOpen(_ banner: VpadnSDKAdKit.VpadnBanner)
  @available(*, deprecated, message: "No replacement.")
  @objc optional func onVpadnAdClosed(_ banner: VpadnSDKAdKit.VpadnBanner)
  @available(*, deprecated, message: "No replacement.")
  @objc optional func onVpadnAdRefreshed(_ banner: VpadnSDKAdKit.VpadnBanner)
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use VponAdSize instead.")
@objcMembers public class VpadnAdSize : ObjectiveC.NSObject {
  @objc public init(CGSize size: CoreFoundation.CGSize)
  @objc public class func banner() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func largeBanner() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func largeRectangle() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func fullBanner() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func leaderBoard() -> VpadnSDKAdKit.VpadnAdSize
  @objc public class func mediumRectangle() -> VpadnSDKAdKit.VpadnAdSize
  @objc deinit
}
@objc @available(*, deprecated, message: "Use VponBannerView instead.")
@objcMembers public class VpadnBanner : ObjectiveC.NSObject {
  @objc @available(*, deprecated, message: "No replacement.")
  public var strBannerId: Swift.String?
  @objc weak public var rootViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc weak public var delegate: (any VpadnSDKAdKit.VpadnBannerDelegate)?
  @objc @available(*, deprecated, message: "No replacement.")
  public var platform: Swift.String?
  @objc @available(*, deprecated, message: "Use VponAdRequestConfiguration.shared.testDeviceIdentifiers instead.")
  public var testIdentifiers: [Swift.String]
  @objc public init(licenseKey: Swift.String, adSize: VpadnSDKAdKit.VpadnAdSize)
  @objc public func cgSize(from adSize: VpadnSDKAdKit.VpadnAdSize) -> CoreFoundation.CGSize
  @objc public func loadRequest(_ request: VpadnSDKAdKit.VpadnAdRequest)
  @objc public func getVpadnAdView() -> UIKit.UIView?
  @objc deinit
}
extension VpadnSDKAdKit.VpadnBanner : VpadnSDKAdKit.VponBannerViewDelegate {
  @objc dynamic public func bannerViewDidReceiveAd(_ bannerView: VpadnSDKAdKit.VponBannerView)
  @objc dynamic public func bannerView(_ bannerView: VpadnSDKAdKit.VponBannerView, didFailToReceiveAdWithError error: any Swift.Error)
  @objc dynamic public func bannerViewDidRecordImpression(_ bannerView: VpadnSDKAdKit.VponBannerView)
  @objc dynamic public func bannerViewDidRecordClick(_ bannerView: VpadnSDKAdKit.VponBannerView)
}
@objc public enum VponFriendlyObstructionType : Swift.Int {
  case mediaControls = 0
  case closeAd
  case notVisible
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponAdObstruction : ObjectiveC.NSObject {
  @objc weak final public var view: UIKit.UIView?
  @objc final public var purpose: VpadnSDKAdKit.VponFriendlyObstructionType
  @objc final public var desc: Swift.String
  @objc final public class func getVponPurpose(_ int: Swift.Int) -> VpadnSDKAdKit.VponFriendlyObstructionType
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class VponNativeAdView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var iconView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var coverImageView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var ratingValueView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var ratingScaleView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var headlineView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var bodyView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var callToActionView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var socialContextView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var mediaView: VpadnSDKAdKit.VponMediaView?
  @objc @_Concurrency.MainActor(unsafe) public var nativeAd: VpadnSDKAdKit.VponNativeAd? {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public protocol VponVideoControllerDelegate {
  @objc optional func videoControllerDidPlayVideo(_ videoController: VpadnSDKAdKit.VponVideoController)
  @objc optional func videoControllerDidPauseVideo(_ videoController: VpadnSDKAdKit.VponVideoController)
  @objc optional func videoControllerDidEndVideoPlayback(_ videoController: VpadnSDKAdKit.VponVideoController)
  @objc optional func videoControllerDidMuteVideo(_ videoController: VpadnSDKAdKit.VponVideoController)
  @objc optional func videoControllerDidUnmuteVideo(_ videoController: VpadnSDKAdKit.VponVideoController)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponVideoController : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any VpadnSDKAdKit.VponVideoControllerDelegate)?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class VponNativeAdImage : ObjectiveC.NSObject {
  @objc final public var image: UIKit.UIImage?
  @objc final public var imageURL: Foundation.URL
  @objc deinit
}
@available(*, deprecated, message: "Use VponNativeAdLoaderDelegate and VponNativeAdDelegate instead.")
@objc public protocol VpadnNativeAdDelegate {
  @objc optional func onVpadnNativeAdLoaded(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @objc optional func onVpadnNativeAd(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd, failedToLoad error: any Swift.Error)
  @available(*, deprecated, message: "No replacement.")
  @objc optional func onVpadnNativeAdWillLeaveApplication(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @objc optional func onVpadnNativeAdDidImpression(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
  @objc optional func onVpadnNativeAdClicked(_ nativeAd: VpadnSDKAdKit.VpadnNativeAd)
}
@objc @available(*, deprecated, message: "Use VponNativeAdLoader and VponNativeAd instead.")
@objcMembers final public class VpadnNativeAd : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any VpadnSDKAdKit.VpadnNativeAdDelegate)?
  @objc @available(*, deprecated, message: "No replacement.")
  final public var strBannerId: Swift.String?
  @objc @available(*, deprecated, message: "No replacement.")
  final public var platform: Swift.String?
  @objc final public var icon: VpadnSDKAdKit.VpadnAdImage?
  @objc final public var coverImage: VpadnSDKAdKit.VpadnAdImage?
  @objc final public var ratingValue: Swift.Double
  @objc final public var ratingScale: Swift.Int
  @objc final public var title: Swift.String?
  @objc final public var body: Swift.String?
  @objc final public var callToAction: Swift.String?
  @objc final public var socialContext: Swift.String?
  @objc public init(licenseKey: Swift.String)
  @objc final public func loadRequest(_ request: VpadnSDKAdKit.VpadnAdRequest)
  @objc @available(*, deprecated, message: "No replacement.")
  final public func isReady() -> Swift.Bool
  @objc final public func registerViewForInteraction(_ view: UIKit.UIView, withViewController viewController: UIKit.UIViewController)
  @objc final public func unregisterView()
  @objc deinit
}
extension VpadnSDKAdKit.VpadnNativeAd : VpadnSDKAdKit.VponNativeAdLoaderDelegate {
  @objc final public func adLoader(_ adLoader: VpadnSDKAdKit.VponNativeAdLoader, didReceive nativeAd: VpadnSDKAdKit.VponNativeAd)
  @objc final public func adLoader(_ adLoader: VpadnSDKAdKit.VponNativeAdLoader, didFailToReceiveAdWithError error: any Swift.Error)
}
extension VpadnSDKAdKit.VpadnNativeAd : VpadnSDKAdKit.VponNativeAdDelegate {
  @objc final public func nativeAdDidRecordImpression(_ nativeAd: VpadnSDKAdKit.VponNativeAd)
  @objc final public func nativeAdDidRecordClick(_ nativeAd: VpadnSDKAdKit.VponNativeAd)
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use VponAdImage instead.")
@objcMembers final public class VpadnAdImage : ObjectiveC.NSObject {
  @objc final public var url: Foundation.URL
  @objc final public func loadImageAsync(withBlock block: @escaping (UIKit.UIImage?) -> Swift.Void)
  #warning("Not being called")
  @objc deinit
}
@available(*, deprecated, message: "Use VponVideoController and VponVideoControllerDelegate instead.")
@objc public protocol VpadnMediaViewDelegate {
  @objc optional func mediaViewDidLoad(_ mediaView: VpadnSDKAdKit.VpadnMediaView)
  @objc optional func mediaViewDidFail(_ mediaView: VpadnSDKAdKit.VpadnMediaView, error: any Swift.Error)
}
@objc @available(*, deprecated, message: "Use VponMediaView instead.")
@objcMembers @_Concurrency.MainActor(unsafe) public class VpadnMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any VpadnSDKAdKit.VpadnMediaViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) weak public var nativeAd: VpadnSDKAdKit.VpadnNativeAd? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum VpadnInReadAdType : Swift.Int {
  case customAd = 0
  case inScroll
  case inTable
  case inTableRepeat
  case inTableCustomAd
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol VpadnInReadAdDelegate {
  @objc optional func vpadnInReadAd(_ ad: VpadnSDKAdKit.VpadnInReadAd, didFailLoading error: any Swift.Error)
  @objc optional func vpadnInReadAdWillLoad(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidLoad(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillStart(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidStart(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillStop(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidStop(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidPause(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidResume(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidMute(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidUnmute(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdCanExpand(_ ad: VpadnSDKAdKit.VpadnInReadAd, withRatio ratio: CoreFoundation.CGFloat)
  @objc optional func vpadnInReadAdWillExpand(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidExpand(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdCanCollapse(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillCollapse(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidCollapse(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWasClicked(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidClickBrowserClose(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillTakeOverFullScreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidTakeOverFullScreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdWillDismissFullscreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidDismissFullscreen(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdSkipButtonTapped(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdSkipButtonDidShow(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidReset(_ ad: VpadnSDKAdKit.VpadnInReadAd)
  @objc optional func vpadnInReadAdDidClean(_ ad: VpadnSDKAdKit.VpadnInReadAd)
}
@objc @objcMembers public class VpadnInReadAd : ObjectiveC.NSObject {
  @objc public var vpadnInReadAdType: VpadnSDKAdKit.VpadnInReadAdType
  @objc public var isLoaded: Swift.Bool
  @objc public var indexPath: Foundation.IndexPath?
  @objc weak public var delegate: (any VpadnSDKAdKit.VpadnInReadAdDelegate)?
  @objc public var videoAdView: VpadnSDKAdKit.VpadnVideoAdView?
  @objc public init(placementId: Swift.String, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, scrollView: UIKit.UIScrollView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, placeholder: UIKit.UIView, heightConstraint constraint: UIKit.NSLayoutConstraint, scrollView: UIKit.UIScrollView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, insertionIndexPath indexPath: Foundation.IndexPath, tableView: UIKit.UITableView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc convenience public init(placementId: Swift.String, insertionIndexPath indexPath: Foundation.IndexPath, repeatMode: Swift.Bool, tableView: UIKit.UITableView, delegate: any VpadnSDKAdKit.VpadnInReadAdDelegate)
  @objc public func loadAdWithTestIdentifiers(_ testIdentifiers: [Swift.String])
  @objc public func videoView() -> UIKit.UIView?
  @objc public func setContentUrl(_ contentURL: Swift.String)
  @objc public func setContentData(_ contentData: [Swift.String : Any])
  @objc public func addContentData(key: Swift.String, value: Swift.String)
  @objc public func addFriendlyObstruction(_ obstructView: UIKit.UIView, purpose: VpadnSDKAdKit.VponFriendlyObstructionType, description: Swift.String)
  @objc public func isVideoAd(_ indexPath: Foundation.IndexPath, stride: Swift.Int) -> Swift.Bool
  @objc deinit
}
extension VpadnSDKAdKit.VpadnInReadAd : Foundation.URLSessionDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
extension VpadnSDKAdKit.VpadnInReadAd : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
extension VpadnSDKAdKit.VpadnInReadAd : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
}
extension VpadnSDKAdKit.VpadnInReadAd : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, accessoryButtonTappedForRowWith indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldHighlightRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDeselectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: Foundation.IndexPath) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, targetIndexPathForMoveFromRowAt sourceIndexPath: Foundation.IndexPath, toProposedIndexPath proposedDestinationIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, indentationLevelForRowAt indexPath: Foundation.IndexPath) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldShowMenuForRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canPerformAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, performAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canFocusRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func indexPathForPreferredFocusedView(in tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldSpringLoadRowAt indexPath: Foundation.IndexPath, with context: any UIKit.UISpringLoadedInteractionContext) -> Swift.Bool
}
@objc public enum VponLogLevel : Swift.Int {
  case debug = 0
  case `default`
  case dontShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VponAdConfiguration : ObjectiveC.NSObject {
  @objc final public var logLevel: VpadnSDKAdKit.VponLogLevel {
    @objc get
    @objc set
  }
  @objc final public var audioManager: VpadnSDKAdKit.VponAdAudioManager
  @objc final public var locationManager: VpadnSDKAdKit.VponAdLocationManager
  @objc public static let shared: VpadnSDKAdKit.VponAdConfiguration
  @objc final public func initializeSdk()
  @objc final public class func sdkVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VponNativeAdLoaderDelegate {
  @objc optional func adLoader(_ adLoader: VpadnSDKAdKit.VponNativeAdLoader, didReceive nativeAd: VpadnSDKAdKit.VponNativeAd)
  @objc optional func adLoader(_ adLoader: VpadnSDKAdKit.VponNativeAdLoader, didFailToReceiveAdWithError error: any Swift.Error)
}
@objc @objcMembers final public class VponNativeAdLoader : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any VpadnSDKAdKit.VponNativeAdLoaderDelegate)?
  @objc public init(licenseKey: Swift.String, rootViewController: UIKit.UIViewController?)
  @objc final public func load(_ request: VpadnSDKAdKit.VponAdRequest)
  @objc deinit
}
@available(*, deprecated, message: "Use VponFriendlyObstructionType instead.")
extension VpadnSDKAdKit.VpadnFriendlyObstructionType : Swift.Equatable {}
@available(*, deprecated, message: "Use VponFriendlyObstructionType instead.")
extension VpadnSDKAdKit.VpadnFriendlyObstructionType : Swift.Hashable {}
@available(*, deprecated, message: "Use VponFriendlyObstructionType instead.")
extension VpadnSDKAdKit.VpadnFriendlyObstructionType : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use VponUserGender instead.")
extension VpadnSDKAdKit.VpadnUserGender : Swift.Equatable {}
@available(*, deprecated, message: "Use VponUserGender instead.")
extension VpadnSDKAdKit.VpadnUserGender : Swift.Hashable {}
@available(*, deprecated, message: "Use VponUserGender instead.")
extension VpadnSDKAdKit.VpadnUserGender : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use VponMaxAdContentRating instead.")
extension VpadnSDKAdKit.VpadnMaxAdContentRating : Swift.Equatable {}
@available(*, deprecated, message: "Use VponMaxAdContentRating instead.")
extension VpadnSDKAdKit.VpadnMaxAdContentRating : Swift.Hashable {}
@available(*, deprecated, message: "Use VponMaxAdContentRating instead.")
extension VpadnSDKAdKit.VpadnMaxAdContentRating : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use VponTagForChildDirectedTreatment instead.")
extension VpadnSDKAdKit.VpadnTagForChildDirectedTreatment : Swift.Equatable {}
@available(*, deprecated, message: "Use VponTagForChildDirectedTreatment instead.")
extension VpadnSDKAdKit.VpadnTagForChildDirectedTreatment : Swift.Hashable {}
@available(*, deprecated, message: "Use VponTagForChildDirectedTreatment instead.")
extension VpadnSDKAdKit.VpadnTagForChildDirectedTreatment : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use VponTagForUnderAgeOfConsent instead.")
extension VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent : Swift.Equatable {}
@available(*, deprecated, message: "Use VponTagForUnderAgeOfConsent instead.")
extension VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent : Swift.Hashable {}
@available(*, deprecated, message: "Use VponTagForUnderAgeOfConsent instead.")
extension VpadnSDKAdKit.VpadnTagForUnderAgeOfConsent : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponMaxAdContentRating : Swift.Equatable {}
extension VpadnSDKAdKit.VponMaxAdContentRating : Swift.Hashable {}
extension VpadnSDKAdKit.VponMaxAdContentRating : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponTagForChildDirectedTreatment : Swift.Equatable {}
extension VpadnSDKAdKit.VponTagForChildDirectedTreatment : Swift.Hashable {}
extension VpadnSDKAdKit.VponTagForChildDirectedTreatment : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponTagForUnderAgeOfConsent : Swift.Equatable {}
extension VpadnSDKAdKit.VponTagForUnderAgeOfConsent : Swift.Hashable {}
extension VpadnSDKAdKit.VponTagForUnderAgeOfConsent : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponUserGender : Swift.Equatable {}
extension VpadnSDKAdKit.VponUserGender : Swift.Hashable {}
extension VpadnSDKAdKit.VponUserGender : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use VponLogLevel instead.")
extension VpadnSDKAdKit.VpadnLogLevel : Swift.Equatable {}
@available(*, deprecated, message: "Use VponLogLevel instead.")
extension VpadnSDKAdKit.VpadnLogLevel : Swift.Hashable {}
@available(*, deprecated, message: "Use VponLogLevel instead.")
extension VpadnSDKAdKit.VpadnLogLevel : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponConsentStatus : Swift.Equatable {}
extension VpadnSDKAdKit.VponConsentStatus : Swift.Hashable {}
extension VpadnSDKAdKit.VponConsentStatus : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponFriendlyObstructionType : Swift.Equatable {}
extension VpadnSDKAdKit.VponFriendlyObstructionType : Swift.Hashable {}
extension VpadnSDKAdKit.VponFriendlyObstructionType : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VpadnInReadAdType : Swift.Equatable {}
extension VpadnSDKAdKit.VpadnInReadAdType : Swift.Hashable {}
extension VpadnSDKAdKit.VpadnInReadAdType : Swift.RawRepresentable {}
extension VpadnSDKAdKit.VponLogLevel : Swift.Equatable {}
extension VpadnSDKAdKit.VponLogLevel : Swift.Hashable {}
extension VpadnSDKAdKit.VponLogLevel : Swift.RawRepresentable {}
